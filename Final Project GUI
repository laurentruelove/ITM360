import tkinter as tk
from tkinter import *
from tkinter import messagebox
import requests
from PIL import Image, ImageTk

def fetch_project_details():
    project_id = project_id_entry.get()
    if project_id:
        try:
            # Fetch project details from the server
            url = 'http://localhost:5000/fetch_project_details'
            payload = {'project_id': project_id}
            response = requests.get(url, params=payload)
            if response.status_code == 200:
                project_details = response.json()
                details_str = f"Project ID: {project_details['ProjectID']}\nProject Title: {project_details['Project_Title']}\nProject Details: {project_details['Project_Details']}"
                messagebox.showinfo("Project Details", details_str)
            elif response.status_code == 404:
                messagebox.showerror("Error", "Project not found")
            else:
                messagebox.showerror("Error", "Failed to fetch project details")
        except requests.ConnectionError:
            messagebox.showerror("Error", "Connection to server failed")
    else:
        messagebox.showerror("Error", "Please enter project ID")
        
def create_new_project():
    new_project_frame.place(relx=0.5, rely=0.5, anchor=CENTER)

def create_project():
    project_id = new_project_id_entry.get()
    project_title = new_project_title_entry.get()
    project_details = new_project_details_entry.get()
    if project_id and project_title and project_details:
        try:
            # Create new project in the database
            url = 'http://localhost:5000/create_project'
            payload = {'project_id': project_id, 'project_title': project_title, 'project_details': project_details}
            response = requests.post(url, json=payload)
            if response.status_code == 200:
                messagebox.showinfo("Success", "Project created successfully")
            elif response.status_code == 409:
                messagebox.showerror("Error", "Project ID already exists")
            else:
                messagebox.showerror("Error", "Failed to create project")
        except requests.ConnectionError:
            messagebox.showerror("Error", "Connection to server failed")
    else:
        messagebox.showerror("Error", "Please fill in all fields")

def exit_create_project():
    new_project_frame.destroy()

def edit_project_details():
    project_id = project_id_entry.get()
    if project_id:
        # Open a new window for editing project details
        edit_window = tk.Toplevel(window)
        edit_window.title("Edit Project Details")

        # Fetch current project details
        url = 'http://localhost:5000/fetch_project_details'
        payload = {'project_id': project_id}
        response = requests.get(url, params=payload)
        if response.status_code == 200:
            project_details = response.json()
            old_project_details_label = Label(edit_window, text="Old Project Details:")
            old_project_details_label.pack()
            old_project_details_text = Text(edit_window, height=5, width=50)
            old_project_details_text.insert(END, project_details['Project_Details'])
            old_project_details_text.pack()

            # New Project Details Entry
            new_project_details_label = Label(edit_window, text="New Project Details:")
            new_project_details_label.pack()
            new_project_details_entry = Entry(edit_window)
            new_project_details_entry.pack()

            # Update Project Details Button
            update_button = Button(edit_window, text="Update Project Details", command=lambda: update_project_details(project_id, new_project_details_entry.get()))
            update_button.pack(pady=10)
        else:
            messagebox.showerror("Error", "Failed to fetch project details")
    else:
        messagebox.showerror("Error", "Please enter project ID")

def update_project_details(project_id, new_project_details):
    if new_project_details:
        try:
            # Update project details in the database
            url = 'http://localhost:5000/update_project_details'
            payload = {'project_id': project_id, 'project_details': new_project_details}
            response = requests.put(url, json=payload)
            if response.status_code == 200:
                messagebox.showinfo("Success", "Project details updated successfully")
            else:
                messagebox.showerror("Error", "Failed to update project details")
        except requests.ConnectionError:
            messagebox.showerror("Error", "Connection to server failed")
    else:
        messagebox.showerror("Error", "Please fill in all fields")

# GUI Setup
window = tk.Tk()
window.title("Project Details")
window.geometry("600x400")  # Larger window size

# Background Image
background_image = Image.open("/Users/LaurenTruelove/Desktop/ITM360/Final Project/background_image.png")
background_photo = ImageTk.PhotoImage(background_image.resize((600, 400), Image.LANCZOS))
background_label = Label(window, image=background_photo)
background_label.place(x=0, y=0, relwidth=1, relheight=1)

# Project ID Entry
project_id_label = Label(window, text="Project ID:", bg="white")
project_id_label.place(x=50, y=50)

project_id_entry = Entry(window)
project_id_entry.place(x=150, y=50)

# Project Title Entry
project_title_label = Label(window, text="Project Title:", bg="white")
project_title_label.place(x=50, y=100)

project_title_entry = Entry(window)
project_title_entry.place(x=150, y=100)

# Fetch Button
fetch_button = Button(window, text="Fetch Project Details", command=fetch_project_details)
fetch_button.place(x=50, y=100)

# Edit Project Details Button
edit_button = Button(window, text="Edit Project Details", command=edit_project_details)
edit_button.place(x=200, y=100)

# Create New Project Button
new_project_button = Button(window, text="Create New Project", command=create_new_project)
new_project_button.place(x=50, y=200)

# New Project Frame
new_project_frame = Frame(window, bg="blue", width=200, height=150)

new_project_id_label = Label(new_project_frame, text="Project ID:")
new_project_id_label.grid(row=0, column=0, padx=10, pady=5, sticky="w")

new_project_id_entry = Entry(new_project_frame)
new_project_id_entry.grid(row=0, column=1, padx=10, pady=5)

new_project_title_label = Label(new_project_frame, text="Project Title:")
new_project_title_label.grid(row=1, column=0, padx=10, pady=5, sticky="w")

new_project_title_entry = Entry(new_project_frame)
new_project_title_entry.grid(row=1, column=1, padx=10, pady=5)

new_project_details_label = Label(new_project_frame, text="Project Details:")
new_project_details_label.grid(row=2, column=0, padx=10, pady=5, sticky="w")

new_project_details_entry = Entry(new_project_frame)
new_project_details_entry.grid(row=2, column=1, padx=10, pady=5)

create_button = Button(new_project_frame, text="Create Project", command=create_project)
create_button.grid(row=3, columnspan=2, padx=10, pady=10)

exit_button = Button(new_project_frame, text="Exit", command=exit_create_project)
exit_button.grid(row=4, columnspan=2, padx=10, pady=10)

window.mainloop()
